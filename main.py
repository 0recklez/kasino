from random import randint

balance = 2000


def get_attempts(coef):
    attempts = {
        2: 10,
        3: 6,
        5: 3
    }
    return attempts.get(coef, 3)


def calculate_win(bet, coef):
    return bet * coef


def is_valid(arg):
    if arg.isdigit() and (1 <= int(arg) <= 100):
        return True
    else:
        return False


def get_bet(current_balance):
    while True:
        try:
            bet = int(input('–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—Éü§ó: '))
            if bet <= 0:
                print("–Ω–µ–ª—å–∑—è –¥–µ–ø–∞—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è")
            elif bet > balance:
                print("–Ω–µ–ª—å–∑—è –¥–µ–ø–Ω—É—Ç—å –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –º–∏–∫—Ä–æ–∑–∞–π–º")
            else:
                return bet
        except ValueError:
            print('–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


def get_coef():
    while True:
        try:
            coef = int(input('–≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç(2, 3, 5): '))
            if coef in {2, 3, 5}:
                return coef
            print("–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç—ã: 2, 3, 5")
        except ValueError:
            print("–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")


def dodep(current_balance):
    print(f"\n–≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")
    bet = get_bet(balance)
    coef = get_coef()
    hidden_number = randint(1, 100)
    counter = get_attempts(coef)
    return hidden_number, coef, counter, bet


def main():
    global balance
    print("–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–∫üí∏\n–≤–∞–º –≤—ã–ø–∞–ª —Ñ—Ä–∏–±–µ—Ç 2000ü•≥ü•≥ –≤–∞—à –±–∞–ª–∞–Ω—Å: 2000")
    if input('—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ "—É—Å–ª–æ–≤–∏—è":  ').lower() == '—É—Å–ª–æ–≤–∏—è':
        print('–≤–∞–º –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ, –ø–æ–ø—ã—Ç–æ–∫\n'
              '—á–µ–º –º–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫, —Ç–µ–º –±–æ–ª—å—à–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç')
    if input("—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç—ã –≤–≤–µ–¥–∏—Ç–µ '–∫–æ—ç—Ñ':  ").lower() == '–∫–æ—ç—Ñ':
        print("–∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç 2, –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ 10\n–∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç 3, –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ 6\n–∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç 5üëçüëç, –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ 3")
    hidden_number, coef, counter, bet = dodep(balance)
    while True:
        user_number = input('–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ')
        if not is_valid(user_number):
            print('–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100üò°üò°: ')
            continue
        num = int(user_number)
        if num > hidden_number:
            counter -= 1
            print(f'–≤–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {counter}')
        elif num < hidden_number:
            counter -= 1
            print(f'–≤–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {counter}')
        else:
            balance += calculate_win(bet, coef)
            print(f"–≤—ã –ø–æ–±–µ–¥–∏–ª–∏, –≤–∞—à –±–∞–ª–∞–Ω—Å: {balance}")
            if input('–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ "–¥–æ–¥–µ–ø": ').lower() == '–¥–æ–¥–µ–ø':
                hidden_number, coef, counter, bet = dodep(balance)
            else:
                break
            continue
        if counter == 0:
            balance -= bet
            if balance <= 0:
                print('–≤—ã –≤—Å–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º –Ω–∞–∏—Å—Ä–æ—á–Ω–µ–π—à–∏–π –¥–æ–¥–µ–ø')
                break
            print(f'—Ç–∞–∞–∞–∫ —Ç—É—Ç –±–µ–∑ –¥–æ–¥–µ–ø–∞ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—èü§îü§î\n–≤–∞—à –±–∞–ª–∞–Ω—Å: {balance}')
            if input('–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ "–¥–æ–¥–µ–ø": ').lower() == '–¥–æ–¥–µ–ø':
                hidden_number, coef, counter, bet = dodep(balance)
            else:
                break


if __name__ == "__main__":
    main()
